(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.anitomyscript = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (process,Buffer){
var anitomyscript = function(anitomyscript) {
  anitomyscript = anitomyscript || {};

var e;e||(e=typeof anitomyscript !== 'undefined' ? anitomyscript : {});var p={},q;for(q in e)e.hasOwnProperty(q)&&(p[q]=e[q]);e.arguments=[];e.thisProgram="./this.program";e.quit=function(a,b){throw b;};e.preRun=[];e.postRun=[];var aa=!1,r=!1,t=!1,ba=!1;
if(e.ENVIRONMENT)if("WEB"===e.ENVIRONMENT)aa=!0;else if("WORKER"===e.ENVIRONMENT)r=!0;else if("NODE"===e.ENVIRONMENT)t=!0;else if("SHELL"===e.ENVIRONMENT)ba=!0;else throw Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.");else aa="object"===typeof window,r="function"===typeof importScripts,t="object"===typeof process&&"function"===typeof require&&!aa&&!r,ba=!aa&&!t&&!r;
if(t){var ca,da;e.read=function(a,b){var c=v(a);c||(ca||(ca=require("fs")),da||(da=require("path")),a=da.normalize(a),c=ca.readFileSync(a));return b?c:c.toString()};e.readBinary=function(a){a=e.read(a,!0);a.buffer||(a=new Uint8Array(a));assert(a.buffer);return a};1<process.argv.length&&(e.thisProgram=process.argv[1].replace(/\\/g,"/"));e.arguments=process.argv.slice(2);process.on("uncaughtException",function(a){if(!(a instanceof ea))throw a;});process.on("unhandledRejection",function(){process.exit(1)});
e.inspect=function(){return"[Emscripten Module object]"}}else if(ba)"undefined"!=typeof read&&(e.read=function(a){var b=v(a);return b?fa(b):read(a)}),e.readBinary=function(a){var b;if(b=v(a))return b;if("function"===typeof readbuffer)return new Uint8Array(readbuffer(a));b=read(a,"binary");assert("object"===typeof b);return b},"undefined"!=typeof scriptArgs?e.arguments=scriptArgs:"undefined"!=typeof arguments&&(e.arguments=arguments),"function"===typeof quit&&(e.quit=function(a){quit(a)});else if(aa||
r)e.read=function(a){try{var b=new XMLHttpRequest;b.open("GET",a,!1);b.send(null);return b.responseText}catch(c){if(a=v(a))return fa(a);throw c;}},r&&(e.readBinary=function(a){try{var b=new XMLHttpRequest;b.open("GET",a,!1);b.responseType="arraybuffer";b.send(null);return new Uint8Array(b.response)}catch(c){if(a=v(a))return a;throw c;}}),e.readAsync=function(a,b,c){var d=new XMLHttpRequest;d.open("GET",a,!0);d.responseType="arraybuffer";d.onload=function(){if(200==d.status||0==d.status&&d.response)b(d.response);
else{var f=v(a);f?b(f.buffer):c()}};d.onerror=c;d.send(null)},e.setWindowTitle=function(a){document.title=a};else throw Error("not compiled for this environment");e.print="undefined"!==typeof console?console.log.bind(console):"undefined"!==typeof print?print:null;e.printErr="undefined"!==typeof printErr?printErr:"undefined"!==typeof console&&console.warn.bind(console)||e.print;e.print=e.print;e.printErr=e.printErr;for(q in p)p.hasOwnProperty(q)&&(e[q]=p[q]);p=void 0;
function ha(a){assert(!ia);var b=w;w=w+a+15&-16;return b}function ja(a){var b;b||(b=16);return Math.ceil(a/b)*b}var ka=0;function assert(a,b){a||y("Assertion failed: "+b)}
function la(a){var b;if(0===b||!a)return"";for(var c=0,d,f=0;;){d=z[a+f>>0];c|=d;if(0==d&&!b)break;f++;if(b&&f==b)break}b||(b=f);d="";if(128>c){for(;0<b;)c=String.fromCharCode.apply(String,z.subarray(a,a+Math.min(b,1024))),d=d?d+c:c,a+=1024,b-=1024;return d}a:{b=z;for(c=a;b[c];)++c;if(16<c-a&&b.subarray&&ma)a=ma.decode(b.subarray(a,c));else for(c="";;){d=b[a++];if(!d){a=c;break a}if(d&128)if(f=b[a++]&63,192==(d&224))c+=String.fromCharCode((d&31)<<6|f);else{var g=b[a++]&63;if(224==(d&240))d=(d&15)<<
12|f<<6|g;else{var h=b[a++]&63;if(240==(d&248))d=(d&7)<<18|f<<12|g<<6|h;else{var n=b[a++]&63;if(248==(d&252))d=(d&3)<<24|f<<18|g<<12|h<<6|n;else{var m=b[a++]&63;d=(d&1)<<30|f<<24|g<<18|h<<12|n<<6|m}}}65536>d?c+=String.fromCharCode(d):(d-=65536,c+=String.fromCharCode(55296|d>>10,56320|d&1023))}else c+=String.fromCharCode(d)}}return a}var ma="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0;
function na(a,b,c,d){if(0<d){d=c+d-1;for(var f=0;f<a.length;++f){var g=a.charCodeAt(f);55296<=g&&57343>=g&&(g=65536+((g&1023)<<10)|a.charCodeAt(++f)&1023);if(127>=g){if(c>=d)break;b[c++]=g}else{if(2047>=g){if(c+1>=d)break;b[c++]=192|g>>6}else{if(65535>=g){if(c+2>=d)break;b[c++]=224|g>>12}else{if(2097151>=g){if(c+3>=d)break;b[c++]=240|g>>18}else{if(67108863>=g){if(c+4>=d)break;b[c++]=248|g>>24}else{if(c+5>=d)break;b[c++]=252|g>>30;b[c++]=128|g>>24&63}b[c++]=128|g>>18&63}b[c++]=128|g>>12&63}b[c++]=
128|g>>6&63}b[c++]=128|g&63}}b[c]=0}}function oa(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&(d=65536+((d&1023)<<10)|a.charCodeAt(++c)&1023);127>=d?++b:b=2047>=d?b+2:65535>=d?b+3:2097151>=d?b+4:67108863>=d?b+5:b+6}return b}"undefined"!==typeof TextDecoder&&new TextDecoder("utf-16le");function pa(a,b){0<a%b&&(a+=b-a%b);return a}var buffer,A,z,qa,ra,B,C,sa,ta;
function ua(){e.HEAP8=A=new Int8Array(buffer);e.HEAP16=qa=new Int16Array(buffer);e.HEAP32=B=new Int32Array(buffer);e.HEAPU8=z=new Uint8Array(buffer);e.HEAPU16=ra=new Uint16Array(buffer);e.HEAPU32=C=new Uint32Array(buffer);e.HEAPF32=sa=new Float32Array(buffer);e.HEAPF64=ta=new Float64Array(buffer)}var va,w,ia,wa,xa,ya,za,D;va=w=wa=xa=ya=za=D=0;ia=!1;
e.reallocBuffer||(e.reallocBuffer=function(a){try{if(ArrayBuffer.ja)var b=ArrayBuffer.ja(buffer,a);else{var c=A;b=new ArrayBuffer(a);(new Int8Array(b)).set(c)}}catch(d){return!1}return Aa(b)?b:!1});var Ba;try{Ba=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,"byteLength").get),Ba(new ArrayBuffer(4))}catch(a){Ba=function(b){return b.byteLength}}var Ca=e.TOTAL_STACK||5242880,E=e.TOTAL_MEMORY||16777216;
E<Ca&&e.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+E+"! (TOTAL_STACK="+Ca+")");e.buffer?buffer=e.buffer:("object"===typeof WebAssembly&&"function"===typeof WebAssembly.Memory?(e.wasmMemory=new WebAssembly.Memory({initial:E/65536}),buffer=e.wasmMemory.buffer):buffer=new ArrayBuffer(E),e.buffer=buffer);ua();B[0]=1668509029;qa[1]=25459;if(115!==z[2]||99!==z[3])throw"Runtime error: expected the system to be little-endian!";
function Da(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b();else{var c=b.G;"number"===typeof c?void 0===b.L?e.dynCall_v(c):e.dynCall_vi(c,b.L):c(void 0===b.L?null:b.L)}}}var Ea=[],Fa=[],Ga=[],Ha=[],Ia=[],Ja=!1;function Ka(){var a=e.preRun.shift();Ea.unshift(a)}var F=0,La=null,Ma=null;e.preloadedImages={};e.preloadedAudios={};var Na="data:application/octet-stream;base64,";function Oa(a){return String.prototype.startsWith?a.startsWith(Na):0===a.indexOf(Na)}
(function(){function a(){try{if(e.wasmBinary)return new Uint8Array(e.wasmBinary);var a=v(d);if(a)return a;if(e.readBinary)return e.readBinary(d);throw"on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";}catch(l){y(l)}}function b(b){function c(a){h=a.exports;if(h.memory){a=h.memory;var b=e.buffer;a.byteLength<b.byteLength&&e.printErr("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here");
b=new Int8Array(b);(new Int8Array(a)).set(b);e.buffer=buffer=a;ua()}e.asm=h;e.usingWasm=!0;F--;e.monitorRunDependencies&&e.monitorRunDependencies(F);0==F&&(null!==La&&(clearInterval(La),La=null),Ma&&(a=Ma,Ma=null,a()))}if("object"!==typeof WebAssembly)return e.printErr("no native wasm support detected"),!1;if(!(e.wasmMemory instanceof WebAssembly.Memory))return e.printErr("no native wasm Memory in use"),!1;b.memory=e.wasmMemory;g.global={NaN:NaN,Infinity:Infinity};g["global.Math"]=Math;g.env=b;F++;
e.monitorRunDependencies&&e.monitorRunDependencies(F);if(e.instantiateWasm)try{return e.instantiateWasm(g,c)}catch(x){return e.printErr("Module.instantiateWasm callback failed with error: "+x),!1}try{var d=new WebAssembly.Instance(new WebAssembly.Module(a()),g)}catch(x){return e.printErr("failed to compile wasm module: "+x),0<=x.toString().indexOf("imported Memory with incompatible size")&&e.printErr("Memory size incompatibility issues may be due to changing TOTAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set TOTAL_MEMORY at runtime to something smaller than it was at compile time)."),
!1}c(d);return h}var c="",d="data:application/octet-stream;base64,",f="";"function"===typeof e.locateFile&&(Oa(c)||(c=e.locateFile(c)),Oa(d)||(d=e.locateFile(d)),Oa(f)||(f=e.locateFile(f)));var g={global:null,env:null,asm2wasm:{"f64-rem":function(a,b){return a%b},"debugger":function(){debugger}},parent:e},h=null;e.asmPreload=e.asm;var n=e.reallocBuffer;e.reallocBuffer=function(a){if("asmjs"===
m)var b=n(a);else a:{a=pa(a,e.usingWasm?65536:16777216);var c=e.buffer.byteLength;if(e.usingWasm)try{b=-1!==e.wasmMemory.grow((a-c)/65536)?e.buffer=e.wasmMemory.buffer:null;break a}catch(x){b=null;break a}b=void 0}return b};var m="";e.asm=function(a,c){if(!c.table){a=e.wasmTableSize;void 0===a&&(a=1024);var d=e.wasmMaxTableSize;c.table="object"===typeof WebAssembly&&"function"===typeof WebAssembly.Table?void 0!==d?new WebAssembly.Table({initial:a,maximum:d,element:"anyfunc"}):new WebAssembly.Table({initial:a,
element:"anyfunc"}):Array(a);e.wasmTable=c.table}c.memoryBase||(c.memoryBase=e.STATIC_BASE);c.tableBase||(c.tableBase=0);c=b(c);assert(c,"no binaryen method succeeded.");return c}})();va=1024;w=va+36896;Fa.push({G:function(){Pa()}},{G:function(){Qa()}},{G:function(){Ra()}},{G:function(){Sa()}});e.STATIC_BASE=va;e.STATIC_BUMP=36896;w+=16;function Ta(a){e.___errno_location&&(B[e.___errno_location()>>2]=a);return a}var Ua=0;function Va(){Ua+=4;return B[Ua-4>>2]}var Wa={};
function Xa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+a);}}var Ya=void 0;function G(a){for(var b="";z[a];)b+=Ya[z[a++]];return b}var H={},J={},Za={};function $a(a){if(void 0===a)return"_unknown";a=a.replace(/[^a-zA-Z0-9_]/g,"$");var b=a.charCodeAt(0);return 48<=b&&57>=b?"_"+a:a}
function ab(a,b){a=$a(a);return(new Function("body","return function "+a+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n'))(b)}function bb(a){var b=Error,c=ab(a,function(b){this.name=a;this.message=b;b=Error(b).stack;void 0!==b&&(this.stack=this.toString()+"\n"+b.replace(/^Error(:[^\n]*)?\n/,""))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message};return c}
var K=void 0;function L(a){throw new K(a);}var cb=void 0;function db(a){throw new cb(a);}function M(a,b,c){function d(b){b=c(b);b.length!==a.length&&db("Mismatched type converter count");for(var d=0;d<a.length;++d)N(a[d],b[d])}a.forEach(function(a){Za[a]=b});var f=Array(b.length),g=[],h=0;b.forEach(function(a,b){J.hasOwnProperty(a)?f[b]=J[a]:(g.push(a),H.hasOwnProperty(a)||(H[a]=[]),H[a].push(function(){f[b]=J[a];++h;h===g.length&&d(f)}))});0===g.length&&d(f)}
function N(a,b,c){c=c||{};if(!("argPackAdvance"in b))throw new TypeError("registerType registeredInstance requires argPackAdvance");var d=b.name;a||L('type "'+d+'" must have a positive integer typeid pointer');if(J.hasOwnProperty(a)){if(c.Y)return;L("Cannot register type '"+d+"' twice")}J[a]=b;delete Za[a];H.hasOwnProperty(a)&&(b=H[a],delete H[a],b.forEach(function(a){a()}))}function eb(a){L(a.a.f.b.name+" instance already deleted")}var fb=void 0,gb=[];
function hb(){for(;gb.length;){var a=gb.pop();a.a.B=!1;a["delete"]()}}function O(){}var ib={};function jb(a,b,c){if(void 0===a[b].h){var d=a[b];a[b]=function(){a[b].h.hasOwnProperty(arguments.length)||L("Function '"+c+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+a[b].h+")!");return a[b].h[arguments.length].apply(this,arguments)};a[b].h=[];a[b].h[d.F]=d}}
function kb(a,b,c){e.hasOwnProperty(a)?((void 0===c||void 0!==e[a].h&&void 0!==e[a].h[c])&&L("Cannot register public name '"+a+"' twice"),jb(e,a,a),e.hasOwnProperty(c)&&L("Cannot register multiple overloads of a function with the same number of arguments ("+c+")!"),e[a].h[c]=b):(e[a]=b,void 0!==c&&(e[a].ta=c))}function lb(a,b,c,d,f,g,h,n){this.name=a;this.constructor=b;this.s=c;this.w=d;this.l=f;this.W=g;this.D=h;this.V=n;this.aa=[]}
function mb(a,b,c){for(;b!==c;)b.D||L("Expected null or instance of "+c.name+", got an instance of "+b.name),a=b.D(a),b=b.l;return a}function nb(a,b){if(null===b)return this.M&&L("null is not a valid "+this.name),0;b.a||L('Cannot pass "'+P(b)+'" as a '+this.name);b.a.c||L("Cannot pass deleted object as a pointer of type "+this.name);return mb(b.a.c,b.a.f.b,this.b)}
function ob(a,b){if(null===b){this.M&&L("null is not a valid "+this.name);if(this.I){var c=this.ba();null!==a&&a.push(this.w,c);return c}return 0}b.a||L('Cannot pass "'+P(b)+'" as a '+this.name);b.a.c||L("Cannot pass deleted object as a pointer of type "+this.name);!this.H&&b.a.f.H&&L("Cannot convert argument of type "+(b.a.j?b.a.j.name:b.a.f.name)+" to parameter type "+this.name);c=mb(b.a.c,b.a.f.b,this.b);if(this.I)switch(void 0===b.a.i&&L("Passing raw pointer to smart pointer is illegal"),this.ea){case 0:b.a.j===
this?c=b.a.i:L("Cannot convert argument of type "+(b.a.j?b.a.j.name:b.a.f.name)+" to parameter type "+this.name);break;case 1:c=b.a.i;break;case 2:if(b.a.j===this)c=b.a.i;else{var d=b.clone();c=this.da(c,pb(function(){d["delete"]()}));null!==a&&a.push(this.w,c)}break;default:L("Unsupporting sharing policy")}return c}
function qb(a,b){if(null===b)return this.M&&L("null is not a valid "+this.name),0;b.a||L('Cannot pass "'+P(b)+'" as a '+this.name);b.a.c||L("Cannot pass deleted object as a pointer of type "+this.name);b.a.f.H&&L("Cannot convert argument of type "+b.a.f.name+" to parameter type "+this.name);return mb(b.a.c,b.a.f.b,this.b)}function rb(a){return this.fromWireType(C[a>>2])}function sb(a,b,c){if(b===c)return a;if(void 0===c.l)return null;a=sb(a,b,c.l);return null===a?null:c.V(a)}var tb={};
function ub(a,b){for(void 0===b&&L("ptr should not be undefined");a.l;)b=a.D(b),a=a.l;return tb[b]}function vb(a,b){b.f&&b.c||db("makeClassHandle requires ptr and ptrType");!!b.j!==!!b.i&&db("Both smartPtrType and smartPtr must be specified");b.count={value:1};return Object.create(a,{a:{value:b}})}
function Q(a,b,c,d,f,g,h,n,m,k,l){this.name=a;this.b=b;this.M=c;this.H=d;this.I=f;this.$=g;this.ea=h;this.P=n;this.ba=m;this.da=k;this.w=l;f||void 0!==b.l?this.toWireType=ob:(this.toWireType=d?nb:qb,this.m=null)}function wb(a,b,c){e.hasOwnProperty(a)||db("Replacing nonexistant public symbol");void 0!==e[a].h&&void 0!==c?e[a].h[c]=b:(e[a]=b,e[a].F=c)}
function R(a,b){a=G(a);if(void 0!==e["FUNCTION_TABLE_"+a])var c=e["FUNCTION_TABLE_"+a][b];else if("undefined"!==typeof FUNCTION_TABLE)c=FUNCTION_TABLE[b];else{c=e.asm["dynCall_"+a];void 0===c&&(c=e.asm["dynCall_"+a.replace(/f/g,"d")],void 0===c&&L("No dynCall invoker for signature: "+a));for(var d=[],f=1;f<a.length;++f)d.push("a"+f);f="return function "+("dynCall_"+a+"_"+b)+"("+d.join(", ")+") {\n";f+="    return dynCall(rawFunction"+(d.length?", ":"")+d.join(", ")+");\n";c=(new Function("dynCall",
"rawFunction",f+"};\n"))(c,b)}"function"!==typeof c&&L("unknown function pointer with signature "+a+": "+b);return c}var xb=void 0;function yb(a){a=zb(a);var b=G(a);S(a);return b}function T(a,b){function c(a){f[a]||J[a]||(Za[a]?Za[a].forEach(c):(d.push(a),f[a]=!0))}var d=[],f={};b.forEach(c);throw new xb(a+": "+d.map(yb).join([", "]));}function Ab(a,b){for(var c=[],d=0;d<a;d++)c.push(B[(b>>2)+d]);return c}function Bb(a){for(;a.length;){var b=a.pop();a.pop()(b)}}
function Cb(a){var b=Function;if(!(b instanceof Function))throw new TypeError("new_ called with constructor type "+typeof b+" which is not a function");var c=ab(b.name||"unknownFunctionName",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}
function Db(a,b,c,d,f){var g=b.length;2>g&&L("argTypes array size mismatch! Must at least get return value and 'this' types!");var h=null!==b[1]&&null!==c,n=!1;for(c=1;c<b.length;++c)if(null!==b[c]&&void 0===b[c].m){n=!0;break}var m="void"!==b[0].name,k="",l="";for(c=0;c<g-2;++c)k+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";a="return function "+$a(a)+"("+k+") {\nif (arguments.length !== "+(g-2)+") {\nthrowBindingError('function "+a+" called with ' + arguments.length + ' arguments, expected "+
(g-2)+" args!');\n}\n";n&&(a+="var destructors = [];\n");var u=n?"destructors":"null";k="throwBindingError invoker fn runDestructors retType classParam".split(" ");d=[L,d,f,Bb,b[0],b[1]];h&&(a+="var thisWired = classParam.toWireType("+u+", this);\n");for(c=0;c<g-2;++c)a+="var arg"+c+"Wired = argType"+c+".toWireType("+u+", arg"+c+"); // "+b[c+2].name+"\n",k.push("argType"+c),d.push(b[c+2]);h&&(l="thisWired"+(0<l.length?", ":"")+l);a+=(m?"var rv = ":"")+"invoker(fn"+(0<l.length?", ":"")+l+");\n";if(n)a+=
"runDestructors(destructors);\n";else for(c=h?1:2;c<b.length;++c)g=1===c?"thisWired":"arg"+(c-2)+"Wired",null!==b[c].m&&(a+=g+"_dtor("+g+"); // "+b[c].name+"\n",k.push(g+"_dtor"),d.push(b[c].m));m&&(a+="var ret = retType.fromWireType(rv);\nreturn ret;\n");k.push(a+"}\n");return Cb(k).apply(null,d)}
function Eb(a,b,c){a instanceof Object||L(c+' with invalid "this": '+a);a instanceof b.b.constructor||L(c+' incompatible with "this" of type '+a.constructor.name);a.a.c||L("cannot call emscripten binding method "+c+" on deleted object");return mb(a.a.c,a.a.f.b,b.b)}var Fb=[],U=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Gb(a){4<a&&0===--U[a].N&&(U[a]=void 0,Fb.push(a))}
function pb(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Fb.length?Fb.pop():U.length;U[b]={N:1,value:a};return b}}function Hb(a,b,c){switch(b){case 0:return function(a){return this.fromWireType((c?A:z)[a])};case 1:return function(a){return this.fromWireType((c?qa:ra)[a>>1])};case 2:return function(a){return this.fromWireType((c?B:C)[a>>2])};default:throw new TypeError("Unknown integer type: "+a);}}
function Ib(a,b){var c=J[a];void 0===c&&L(b+" has unknown type "+yb(a));return c}function P(a){if(null===a)return"null";var b=typeof a;return"object"===b||"array"===b||"function"===b?a.toString():""+a}function Jb(a,b){switch(b){case 2:return function(a){return this.fromWireType(sa[a>>2])};case 3:return function(a){return this.fromWireType(ta[a>>3])};default:throw new TypeError("Unknown float type: "+a);}}
function Kb(a,b,c){switch(b){case 0:return c?function(a){return A[a]}:function(a){return z[a]};case 1:return c?function(a){return qa[a>>1]}:function(a){return ra[a>>1]};case 2:return c?function(a){return B[a>>2]}:function(a){return C[a>>2]};default:throw new TypeError("Unknown integer type: "+a);}}var Lb=w;w+=16;var Mb,V={};function Nb(a){if(0===a)return 0;a=la(a);if(!V.hasOwnProperty(a))return 0;Nb.o&&S(Nb.o);a=V[a];var b=oa(a)+1,c=Ob(b);c&&na(a,A,c,b);Nb.o=c;return Nb.o}
function W(){W.o||(W.o=[]);W.o.push(Pb());return W.o.length-1}function Qb(a){return 0===a%4&&(0!==a%100||0===a%400)}function Rb(a,b){for(var c=0,d=0;d<=b;c+=a[d++]);return c}var Sb=[31,29,31,30,31,30,31,31,30,31,30,31],Tb=[31,28,31,30,31,30,31,31,30,31,30,31];
function Ub(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),d=(Qb(a.getFullYear())?Sb:Tb)[c];if(b>d-a.getDate())b-=d-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}
function Vb(a,b,c,d){function f(a,b,c){for(a="number"===typeof a?a.toString():a||"";a.length<b;)a=c[0]+a;return a}function g(a,b){return f(a,b,"0")}function h(a,b){function c(a){return 0>a?-1:0<a?1:0}var d;0===(d=c(a.getFullYear()-b.getFullYear()))&&0===(d=c(a.getMonth()-b.getMonth()))&&(d=c(a.getDate()-b.getDate()));return d}function n(a){switch(a.getDay()){case 0:return new Date(a.getFullYear()-1,11,29);case 1:return a;case 2:return new Date(a.getFullYear(),0,3);case 3:return new Date(a.getFullYear(),
0,2);case 4:return new Date(a.getFullYear(),0,1);case 5:return new Date(a.getFullYear()-1,11,31);case 6:return new Date(a.getFullYear()-1,11,30)}}function m(a){a=Ub(new Date(a.g+1900,0,1),a.K);var b=n(new Date(a.getFullYear()+1,0,4));return 0>=h(n(new Date(a.getFullYear(),0,4)),a)?0>=h(b,a)?a.getFullYear()+1:a.getFullYear():a.getFullYear()-1}var k=B[d+40>>2];d={ha:B[d>>2],ga:B[d+4>>2],J:B[d+8>>2],A:B[d+12>>2],u:B[d+16>>2],g:B[d+20>>2],R:B[d+24>>2],K:B[d+28>>2],ua:B[d+32>>2],fa:B[d+36>>2],ia:k?la(k):
""};c=la(c);k={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var l in k)c=c.replace(new RegExp(l,"g"),k[l]);var u="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),x="January February March April May June July August September October November December".split(" ");k={"%a":function(a){return u[a.R].substring(0,3)},"%A":function(a){return u[a.R]},"%b":function(a){return x[a.u].substring(0,
3)},"%B":function(a){return x[a.u]},"%C":function(a){return g((a.g+1900)/100|0,2)},"%d":function(a){return g(a.A,2)},"%e":function(a){return f(a.A,2," ")},"%g":function(a){return m(a).toString().substring(2)},"%G":function(a){return m(a)},"%H":function(a){return g(a.J,2)},"%I":function(a){a=a.J;0==a?a=12:12<a&&(a-=12);return g(a,2)},"%j":function(a){return g(a.A+Rb(Qb(a.g+1900)?Sb:Tb,a.u-1),3)},"%m":function(a){return g(a.u+1,2)},"%M":function(a){return g(a.ga,2)},"%n":function(){return"\n"},"%p":function(a){return 0<=
a.J&&12>a.J?"AM":"PM"},"%S":function(a){return g(a.ha,2)},"%t":function(){return"\t"},"%u":function(a){return(new Date(a.g+1900,a.u+1,a.A,0,0,0,0)).getDay()||7},"%U":function(a){var b=new Date(a.g+1900,0,1),c=0===b.getDay()?b:Ub(b,7-b.getDay());a=new Date(a.g+1900,a.u,a.A);return 0>h(c,a)?g(Math.ceil((31-c.getDate()+(Rb(Qb(a.getFullYear())?Sb:Tb,a.getMonth()-1)-31)+a.getDate())/7),2):0===h(c,b)?"01":"00"},"%V":function(a){var b=n(new Date(a.g+1900,0,4)),c=n(new Date(a.g+1901,0,4)),d=Ub(new Date(a.g+
1900,0,1),a.K);return 0>h(d,b)?"53":0>=h(c,d)?"01":g(Math.ceil((b.getFullYear()<a.g+1900?a.K+32-b.getDate():a.K+1-b.getDate())/7),2)},"%w":function(a){return(new Date(a.g+1900,a.u+1,a.A,0,0,0,0)).getDay()},"%W":function(a){var b=new Date(a.g,0,1),c=1===b.getDay()?b:Ub(b,0===b.getDay()?1:7-b.getDay()+1);a=new Date(a.g+1900,a.u,a.A);return 0>h(c,a)?g(Math.ceil((31-c.getDate()+(Rb(Qb(a.getFullYear())?Sb:Tb,a.getMonth()-1)-31)+a.getDate())/7),2):0===h(c,b)?"01":"00"},"%y":function(a){return(a.g+1900).toString().substring(2)},
"%Y":function(a){return a.g+1900},"%z":function(a){a=a.fa;var b=0<=a;a=Math.abs(a)/60;return(b?"+":"-")+String("0000"+(a/60*100+a%60)).slice(-4)},"%Z":function(a){return a.ia},"%%":function(){return"%"}};for(l in k)0<=c.indexOf(l)&&(c=c.replace(new RegExp(l,"g"),k[l](d)));l=Wb(c);if(l.length>b)return 0;A.set(l,a);return l.length-1}for(var Xb=Array(256),Yb=0;256>Yb;++Yb)Xb[Yb]=String.fromCharCode(Yb);Ya=Xb;K=e.BindingError=bb("BindingError");cb=e.InternalError=bb("InternalError");
O.prototype.isAliasOf=function(a){if(!(this instanceof O&&a instanceof O))return!1;var b=this.a.f.b,c=this.a.c,d=a.a.f.b;for(a=a.a.c;b.l;)c=b.D(c),b=b.l;for(;d.l;)a=d.D(a),d=d.l;return b===d&&c===a};O.prototype.clone=function(){this.a.c||eb(this);if(this.a.C)return this.a.count.value+=1,this;var a=this.a;a=Object.create(Object.getPrototypeOf(this),{a:{value:{count:a.count,B:a.B,C:a.C,c:a.c,f:a.f,i:a.i,j:a.j}}});a.a.count.value+=1;a.a.B=!1;return a};
O.prototype["delete"]=function(){this.a.c||eb(this);this.a.B&&!this.a.C&&L("Object already scheduled for deletion");--this.a.count.value;if(0===this.a.count.value){var a=this.a;a.i?a.j.w(a.i):a.f.b.w(a.c)}this.a.C||(this.a.i=void 0,this.a.c=void 0)};O.prototype.isDeleted=function(){return!this.a.c};O.prototype.deleteLater=function(){this.a.c||eb(this);this.a.B&&!this.a.C&&L("Object already scheduled for deletion");gb.push(this);1===gb.length&&fb&&fb(hb);this.a.B=!0;return this};
Q.prototype.X=function(a){this.P&&(a=this.P(a));return a};Q.prototype.O=function(a){this.w&&this.w(a)};Q.prototype.argPackAdvance=8;Q.prototype.readValueFromPointer=rb;Q.prototype.deleteObject=function(a){if(null!==a)a["delete"]()};
Q.prototype.fromWireType=function(a){function b(){return this.I?vb(this.b.s,{f:this.$,c:c,j:this,i:a}):vb(this.b.s,{f:this,c:a})}var c=this.X(a);if(!c)return this.O(a),null;var d=ub(this.b,c);if(void 0!==d){if(0===d.a.count.value)return d.a.c=c,d.a.i=a,d.clone();d=d.clone();this.O(a);return d}d=this.b.W(c);d=ib[d];if(!d)return b.call(this);d=this.H?d.U:d.pointerType;var f=sb(c,this.b,d.b);return null===f?b.call(this):this.I?vb(d.b.s,{f:d,c:f,j:this,i:a}):vb(d.b.s,{f:d,c:f})};
e.getInheritedInstanceCount=function(){return Object.keys(tb).length};e.getLiveInheritedInstances=function(){var a=[],b;for(b in tb)tb.hasOwnProperty(b)&&a.push(tb[b]);return a};e.flushPendingDeletes=hb;e.setDelayFunction=function(a){fb=a;gb.length&&fb&&fb(hb)};xb=e.UnboundTypeError=bb("UnboundTypeError");e.count_emval_handles=function(){for(var a=0,b=5;b<U.length;++b)void 0!==U[b]&&++a;return a};e.get_first_emval=function(){for(var a=5;a<U.length;++a)if(void 0!==U[a])return U[a];return null};
var X,Y;Mb?(Y=B[Lb>>2],X=B[Y>>2]):(Mb=!0,V.USER=V.LOGNAME="web_user",V.PATH="/",V.PWD="/",V.HOME="/home/web_user",V.LANG="C.UTF-8",V._=e.thisProgram,X=ha(1024),Y=ha(256),B[Y>>2]=X,B[Lb>>2]=Y);var Zb=[],$b=0,ac;for(ac in V)if("string"===typeof V[ac]){var bc=ac+"="+V[ac];Zb.push(bc);$b+=bc.length}if(1024<$b)throw Error("Environment size exceeded TOTAL_ENV_SIZE!");
for(var cc=0;cc<Zb.length;cc++){for(var dc=bc=Zb[cc],ec=X,fc=0;fc<dc.length;++fc)A[ec++>>0]=dc.charCodeAt(fc);A[ec>>0]=0;B[Y+4*cc>>2]=X;X+=bc.length+1}B[Y+4*Zb.length>>2]=0;D=ha(4);wa=xa=ja(w);ya=wa+Ca;za=ja(ya);B[D>>2]=za;ia=!0;var hc=!1;function Wb(a){var b=Array(oa(a)+1);na(a,b,0,b.length);return b}
function fa(a){for(var b=[],c=0;c<a.length;c++){var d=a[c];255<d&&(hc&&assert(!1,"Character code "+d+" ("+String.fromCharCode(d)+")  at offset "+c+" not in 0x00-0xFF."),d&=255);b.push(String.fromCharCode(d))}return b.join("")}
var ic="function"===typeof atob?atob:function(a){var b="",c=0;a=a.replace(/[^A-Za-z0-9\+\/=]/g,"");do{var d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++));var f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++));var g="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++));var h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++));d=d<<2|f>>4;
f=(f&15)<<4|g>>2;var n=(g&3)<<6|h;b+=String.fromCharCode(d);64!==g&&(b+=String.fromCharCode(f));64!==h&&(b+=String.fromCharCode(n))}while(c<a.length);return b};
function v(a){if(Oa(a)){a=a.slice(Na.length);if("boolean"===typeof t&&t){try{var b=Buffer.from(a,"base64")}catch(g){b=new Buffer(a,"base64")}var c=new Uint8Array(b.buffer,b.byteOffset,b.byteLength)}else try{var d=ic(a),f=new Uint8Array(d.length);for(b=0;b<d.length;++b)f[b]=d.charCodeAt(b);c=f}catch(g){throw Error("Converting base64 string to bytes failed.");}return c}}e.wasmTableSize=593;e.wasmMaxTableSize=593;e.S={};
e.T={abort:y,enlargeMemory:function(){var a=e.usingWasm?65536:16777216,b=2147483648-a;if(B[D>>2]>b)return!1;var c=E;for(E=Math.max(E,16777216);E<B[D>>2];)536870912>=E?E=pa(2*E,a):E=Math.min(pa((3*E+2147483648)/4,a),b);a=e.reallocBuffer(E);if(!a||a.byteLength!=E)return E=c,!1;e.buffer=buffer=a;ua();return!0},getTotalMemory:function(){return E},abortOnCannotGrowMemory:function(){y("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+E+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")},
___lock:function(){},___map_file:function(){Ta(1);return-1},___setErrNo:Ta,___syscall91:function(a,b){Ua=b;try{var c=Va(),d=Va(),f=Wa.Z[c];if(!f)return 0;if(d===f.qa){var g=FS.oa(f.fd);Wa.ma(c,g,d,f.flags);FS.sa(g);Wa.Z[c]=null;f.la&&S(f.ra)}return 0}catch(h){return"undefined"!==typeof FS&&h instanceof FS.ka||y(h),-h.na}},___unlock:function(){},__embind_register_bool:function(a,b,c,d,f){var g=Xa(c);b=G(b);N(a,{name:b,fromWireType:function(a){return!!a},toWireType:function(a,b){return b?d:f},argPackAdvance:8,
readValueFromPointer:function(a){if(1===c)var d=A;else if(2===c)d=qa;else if(4===c)d=B;else throw new TypeError("Unknown boolean type size: "+b);return this.fromWireType(d[a>>g])},m:null})},__embind_register_class:function(a,b,c,d,f,g,h,n,m,k,l,u,x){l=G(l);g=R(f,g);n&&(n=R(h,n));k&&(k=R(m,k));x=R(u,x);var I=$a(l);kb(I,function(){T("Cannot construct "+l+" due to unbound types",[d])});M([a,b,c],d?[d]:[],function(b){b=b[0];if(d){var c=b.b;var f=c.s}else f=O.prototype;b=ab(I,function(){if(Object.getPrototypeOf(this)!==
h)throw new K("Use 'new' to construct "+l);if(void 0===m.v)throw new K(l+" has no accessible constructor");var a=m.v[arguments.length];if(void 0===a)throw new K("Tried to invoke ctor of "+l+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(m.v).toString()+") parameters instead!");return a.apply(this,arguments)});var h=Object.create(f,{constructor:{value:b}});b.prototype=h;var m=new lb(l,b,h,x,c,g,n,k);c=new Q(l,m,!0,!1,!1);f=new Q(l+"*",m,!1,!1,!1);var u=new Q(l+
" const*",m,!1,!0,!1);ib[a]={pointerType:f,U:u};wb(I,b);return[c,f,u]})},__embind_register_class_constructor:function(a,b,c,d,f,g){var h=Ab(b,c);f=R(d,f);M([],[a],function(a){a=a[0];var c="constructor "+a.name;void 0===a.b.v&&(a.b.v=[]);if(void 0!==a.b.v[b-1])throw new K("Cannot register multiple constructors with identical number of parameters ("+(b-1)+") for class '"+a.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");a.b.v[b-1]=function(){T("Cannot construct "+
a.name+" due to unbound types",h)};M([],h,function(d){a.b.v[b-1]=function(){arguments.length!==b-1&&L(c+" called with "+arguments.length+" arguments, expected "+(b-1));var a=[],h=Array(b);h[0]=g;for(var k=1;k<b;++k)h[k]=d[k].toWireType(a,arguments[k-1]);h=f.apply(null,h);Bb(a);return d[0].fromWireType(h)};return[]});return[]})},__embind_register_class_function:function(a,b,c,d,f,g,h,n){var m=Ab(c,d);b=G(b);g=R(f,g);M([],[a],function(a){function d(){T("Cannot call "+f+" due to unbound types",m)}a=
a[0];var f=a.name+"."+b;n&&a.b.aa.push(b);var k=a.b.s,I=k[b];void 0===I||void 0===I.h&&I.className!==a.name&&I.F===c-2?(d.F=c-2,d.className=a.name,k[b]=d):(jb(k,b,f),k[b].h[c-2]=d);M([],m,function(d){d=Db(f,d,a,g,h);void 0===k[b].h?(d.F=c-2,k[b]=d):k[b].h[c-2]=d;return[]});return[]})},__embind_register_class_property:function(a,b,c,d,f,g,h,n,m,k){b=G(b);f=R(d,f);M([],[a],function(a){a=a[0];var d=a.name+"."+b,l={get:function(){T("Cannot access "+d+" due to unbound types",[c,h])},enumerable:!0,configurable:!0};
m?l.set=function(){T("Cannot access "+d+" due to unbound types",[c,h])}:l.set=function(){L(d+" is a read-only property")};Object.defineProperty(a.b.s,b,l);M([],m?[c,h]:[c],function(c){var h=c[0],l={get:function(){var b=Eb(this,a,d+" getter");return h.fromWireType(f(g,b))},enumerable:!0};if(m){m=R(n,m);var u=c[1];l.set=function(b){var c=Eb(this,a,d+" setter"),f=[];m(k,c,u.toWireType(f,b));Bb(f)}}Object.defineProperty(a.b.s,b,l);return[]});return[]})},__embind_register_emval:function(a,b){b=G(b);N(a,
{name:b,fromWireType:function(a){var b=U[a].value;Gb(a);return b},toWireType:function(a,b){return pb(b)},argPackAdvance:8,readValueFromPointer:rb,m:null})},__embind_register_enum:function(a,b,c,d){function f(){}c=Xa(c);b=G(b);f.values={};N(a,{name:b,constructor:f,fromWireType:function(a){return this.constructor.values[a]},toWireType:function(a,b){return b.value},argPackAdvance:8,readValueFromPointer:Hb(b,c,d),m:null});kb(b,f)},__embind_register_enum_value:function(a,b,c){var d=Ib(a,"enum");b=G(b);
a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:ab(d.name+"_"+b,function(){})}});a.values[c]=d;a[b]=d},__embind_register_float:function(a,b,c){c=Xa(c);b=G(b);N(a,{name:b,fromWireType:function(a){return a},toWireType:function(a,b){if("number"!==typeof b&&"boolean"!==typeof b)throw new TypeError('Cannot convert "'+P(b)+'" to '+this.name);return b},argPackAdvance:8,readValueFromPointer:Jb(b,c),m:null})},__embind_register_function:function(a,b,c,d,f,g){var h=
Ab(b,c);a=G(a);f=R(d,f);kb(a,function(){T("Cannot call "+a+" due to unbound types",h)},b-1);M([],h,function(c){c=[c[0],null].concat(c.slice(1));wb(a,Db(a,c,null,f,g),b-1);return[]})},__embind_register_integer:function(a,b,c,d,f){function g(a){return a}b=G(b);-1===f&&(f=4294967295);var h=Xa(c);if(0===d){var n=32-8*c;g=function(a){return a<<n>>>n}}var m=-1!=b.indexOf("unsigned");N(a,{name:b,fromWireType:g,toWireType:function(a,c){if("number"!==typeof c&&"boolean"!==typeof c)throw new TypeError('Cannot convert "'+
P(c)+'" to '+this.name);if(c<d||c>f)throw new TypeError('Passing a number "'+P(c)+'" from JS side to C/C++ side to an argument of type "'+b+'", which is outside the valid range ['+d+", "+f+"]!");return m?c>>>0:c|0},argPackAdvance:8,readValueFromPointer:Kb(b,h,0!==d),m:null})},__embind_register_memory_view:function(a,b,c){function d(a){a>>=2;var b=C;return new f(b.buffer,b[a+1],b[a])}var f=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=G(c);N(a,
{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{Y:!0})},__embind_register_std_string:function(a,b){b=G(b);N(a,{name:b,fromWireType:function(a){for(var b=C[a>>2],c=Array(b),g=0;g<b;++g)c[g]=String.fromCharCode(z[a+4+g]);S(a);return c.join("")},toWireType:function(a,b){function c(a,b){return a[b]}function d(a,b){return a.charCodeAt(b)}b instanceof ArrayBuffer&&(b=new Uint8Array(b));var h;b instanceof Uint8Array?h=c:b instanceof Uint8ClampedArray?h=c:b instanceof Int8Array?h=c:"string"===
typeof b?h=d:L("Cannot pass non-string to std::string");var n=b.length,m=Ob(4+n);C[m>>2]=n;for(var k=0;k<n;++k){var l=h(b,k);255<l&&(S(m),L("String has UTF-16 code units that do not fit in 8 bits"));z[m+4+k]=l}null!==a&&a.push(S,m);return m},argPackAdvance:8,readValueFromPointer:rb,m:function(a){S(a)}})},__embind_register_std_wstring:function(a,b,c){c=G(c);if(2===b){var d=function(){return ra};var f=1}else 4===b&&(d=function(){return C},f=2);N(a,{name:c,fromWireType:function(a){for(var b=d(),c=C[a>>
2],g=Array(c),k=a+4>>f,l=0;l<c;++l)g[l]=String.fromCharCode(b[k+l]);S(a);return g.join("")},toWireType:function(a,c){var g=d(),h=c.length,k=Ob(4+h*b);C[k>>2]=h;for(var l=k+4>>f,u=0;u<h;++u)g[l+u]=c.charCodeAt(u);null!==a&&a.push(S,k);return k},argPackAdvance:8,readValueFromPointer:rb,m:function(a){S(a)}})},__embind_register_void:function(a,b){b=G(b);N(a,{pa:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},__emval_decref:Gb,__emval_incref:function(a){4<a&&(U[a].N+=1)},
__emval_take_value:function(a,b){a=Ib(a,"_emval_take_value");a=a.readValueFromPointer(b);return pb(a)},_abort:function(){e.abort()},_emscripten_memcpy_big:function(a,b,c){z.set(z.subarray(b,b+c),a);return a},_getenv:Nb,_llvm_stackrestore:function(a){var b=W.o[a];W.o.splice(a,1);jc(b)},_llvm_stacksave:W,_pthread_cond_wait:function(){return 0},_strftime_l:function(a,b,c,d){return Vb(a,b,c,d)},DYNAMICTOP_PTR:D,STACKTOP:xa};
var Z=e.asm(e.S,e.T,buffer),Pa=e.__GLOBAL__sub_I_anitomy_script_cpp=Z.__GLOBAL__sub_I_anitomy_script_cpp,Sa=e.__GLOBAL__sub_I_bind_cpp=Z.__GLOBAL__sub_I_bind_cpp,Qa=e.__GLOBAL__sub_I_keyword_cpp=Z.__GLOBAL__sub_I_keyword_cpp,Ra=e.__GLOBAL__sub_I_parser_helper_cpp=Z.__GLOBAL__sub_I_parser_helper_cpp,zb=e.___getTypeName=Z.___getTypeName,Aa=e._emscripten_replace_memory=Z._emscripten_replace_memory,S=e._free=Z._free,Ob=e._malloc=Z._malloc,jc=e.stackRestore=Z.stackRestore,Pb=e.stackSave=Z.stackSave;
e.dynCall_i=Z.dynCall_i;e.dynCall_ii=Z.dynCall_ii;e.dynCall_iii=Z.dynCall_iii;e.dynCall_iiii=Z.dynCall_iiii;e.dynCall_iiiii=Z.dynCall_iiiii;e.dynCall_iiiiid=Z.dynCall_iiiiid;e.dynCall_iiiiii=Z.dynCall_iiiiii;e.dynCall_iiiiiid=Z.dynCall_iiiiiid;e.dynCall_iiiiiii=Z.dynCall_iiiiiii;e.dynCall_iiiiiiii=Z.dynCall_iiiiiiii;e.dynCall_iiiiiiiii=Z.dynCall_iiiiiiiii;e.dynCall_iiiiij=Z.dynCall_iiiiij;e.dynCall_v=Z.dynCall_v;e.dynCall_vi=Z.dynCall_vi;e.dynCall_vii=Z.dynCall_vii;e.dynCall_viii=Z.dynCall_viii;
e.dynCall_viiii=Z.dynCall_viiii;e.dynCall_viiiii=Z.dynCall_viiiii;e.dynCall_viiiiii=Z.dynCall_viiiiii;e.asm=Z;e.then=function(a){if(e.calledRun)a(e);else{var b=e.onRuntimeInitialized;e.onRuntimeInitialized=function(){b&&b();a(e)}}return e};function ea(a){this.name="ExitStatus";this.message="Program terminated with exit("+a+")";this.status=a}ea.prototype=Error();ea.prototype.constructor=ea;Ma=function kc(){e.calledRun||lc();e.calledRun||(Ma=kc)};
function lc(){function a(){if(!e.calledRun&&(e.calledRun=!0,!ka)){Ja||(Ja=!0,Da(Fa));Da(Ga);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var a=e.postRun.shift();Ia.unshift(a)}Da(Ia)}}if(!(0<F)){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)Ka();Da(Ea);0<F||e.calledRun||(e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},
1);a()},1)):a())}}e.run=lc;e.exit=function(a,b){if(!b||!e.noExitRuntime||0!==a){if(!e.noExitRuntime&&(ka=!0,xa=void 0,Da(Ha),e.onExit))e.onExit(a);t&&process.exit(a);e.quit(a,new ea(a))}};function y(a){if(e.onAbort)e.onAbort(a);void 0!==a?(e.print(a),e.printErr(a),a=JSON.stringify(a)):a="";ka=!0;throw"abort("+a+"). Build with -s ASSERTIONS=1 for more info.";}e.abort=y;if(e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();e.noExitRuntime=!0;lc();


  return anitomyscript;
};
if (typeof exports === 'object' && typeof module === 'object')
    module.exports = anitomyscript;
  else if (typeof define === 'function' && define['amd'])
    define([], function() { return anitomyscript; });
  else if (typeof exports === 'object')
    exports["anitomyscript"] = anitomyscript;
  
}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":8,"buffer":5,"fs":4,"path":7}],2:[function(require,module,exports){
'use strict';

var AnitomyNative = require('./build/anitomy-build');
var anitomy_native = new AnitomyNative();

function elementEntry(elements, key) {
  if (elements.count(key) > 1) {
    return newArrayFromStringVector(elements.get_all(key));
  } else {
    var val = elements.get(key);
    return val == '' ? undefined : val;
  }
}

function createObjectFromElements(elements) {
  return {
    anime_season: elementEntry(elements, anitomy_native.ElementCategory.kElementAnimeSeason),
    season_prefix: elementEntry(elements, anitomy_native.ElementCategory.kElementAnimeSeasonPrefix),
    anime_title: elementEntry(elements, anitomy_native.ElementCategory.kElementAnimeTitle),
    anime_type: elementEntry(elements, anitomy_native.ElementCategory.kElementAnimeType),
    anime_year: elementEntry(elements, anitomy_native.ElementCategory.kElementAnimeYear),
    audio_term: elementEntry(elements, anitomy_native.ElementCategory.kElementAudioTerm),
    device_compatibility: elementEntry(elements, anitomy_native.ElementCategory.kElementDeviceCompatibility),
    episode_number: elementEntry(elements, anitomy_native.ElementCategory.kElementEpisodeNumber),
    episode_prefix: elementEntry(elements, anitomy_native.ElementCategory.kElementEpisodePrefix),
    episode_title: elementEntry(elements, anitomy_native.ElementCategory.kElementEpisodeTitle),
    file_checksum: elementEntry(elements, anitomy_native.ElementCategory.kElementFileChecksum),
    file_extension: elementEntry(elements, anitomy_native.ElementCategory.kElementFileExtension),
    file_name: elementEntry(elements, anitomy_native.ElementCategory.kElementFileName),
    language: elementEntry(elements, anitomy_native.ElementCategory.kElementLanguage),
    other: elementEntry(elements, anitomy_native.ElementCategory.kElementOther),
    release_group: elementEntry(elements, anitomy_native.ElementCategory.kElementReleaseGroup),
    release_information: elementEntry(elements, anitomy_native.ElementCategory.kElementReleaseInformation),
    release_version: elementEntry(elements, anitomy_native.ElementCategory.kElementReleaseVersion),
    source: elementEntry(elements, anitomy_native.ElementCategory.kElementSource),
    subtitles: elementEntry(elements, anitomy_native.ElementCategory.kElementSubtitles),
    video_resolution: elementEntry(elements, anitomy_native.ElementCategory.kElementVideoResolution),
    video_term: elementEntry(elements, anitomy_native.ElementCategory.kElementVideoTerm),
    volume_number: elementEntry(elements, anitomy_native.ElementCategory.kElementVolumeNumber),
    volume_prefix: elementEntry(elements, anitomy_native.ElementCategory.kElementVolumePrefix),
    unknown: elementEntry(elements, anitomy_native.ElementCategory.kElementUnknown)
  };
}

function mapVector(vector, cb) {
  var array = [];
  for (var i = 0; i < vector.size(); i++) {
    array.push(cb(vector.get(i)));
  }
  return array;
}

function newArrayFromElementVector(vector) {
  return mapVector(vector, function (val) {
    return createObjectFromElements(val);
  });
}

function newArrayFromStringVector(vector) {
  return mapVector(vector, function (val) {
    return val;
  });
}

function validateInput(value) {
  if (typeof value !== 'string' || !value) {
    throw new Error('value should be a non empty string');
  }
}

function newStringVector(array, validate) {
  var vec = new anitomy_native.VectorString_t();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var value = _step.value;

      if (validate) {
        validateInput(value);
      }
      vec.push_back(value);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return vec;
}

function newAnitomyOptions(options) {
  var anitomyOpts = anitomy_native._createOptions();
  if (typeof options.allowed_delimiters === 'string') {
    anitomyOpts.allowed_delimiters = options.allowed_delimiters;
  }
  if (Array.isArray(options.ignored_strings)) {
    anitomyOpts.ignored_strings = newStringVector(options.ignored_strings, true);
  }
  if (options.parse_episode_number !== undefined) {
    anitomyOpts.parse_episode_number = !!options.parse_episode_number;
  }
  if (options.parse_episode_title !== undefined) {
    anitomyOpts.parse_episode_title = !!options.parse_episode_title;
  }
  if (options.parse_file_extension !== undefined) {
    anitomyOpts.parse_file_extension = !!options.parse_file_extension;
  }
  if (options.parse_release_group !== undefined) {
    anitomyOpts.parse_release_group = !!options.parse_release_group;
  }
  return anitomyOpts;
}

function parse(file, options) {
  var parsed = void 0;

  options = newAnitomyOptions(options || {});

  if (Array.isArray(file)) {
    parsed = anitomy_native._parseArray(newStringVector(file, true), options);
    parsed = newArrayFromElementVector(parsed);
  } else {
    validateInput(file);
    parsed = anitomy_native._parseFile(file, options);
    parsed = createObjectFromElements(parsed);
  }

  return parsed;
}

module.exports = {
  parse: parse,
  AnitomyNative: AnitomyNative
};

},{"./build/anitomy-build":1}],3:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (ArrayBuffer.isView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (ArrayBuffer.isView(buf)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":3,"ieee754":6}],6:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],7:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":8}],8:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[2])(2)
});
